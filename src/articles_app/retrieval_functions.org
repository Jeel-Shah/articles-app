#+TITLE: Retrieval Functions
#+DATE: <2017-05-07 Sun>
#+AUTHOR: Jeel Shah

We will have a seperate namespace which contains functions which will retrieve:
  1. RSS data
  2. JSON data

Furthermore, it will prettify the data into list items that hiccup can use to
insert into our page.

* Core
#+BEGIN_SRC clojure :tangle yes
  (ns articles-app.retrieval-functions
    (:require [feedme]
              [clojure.java.jdbc :as sql]
              [hiccup.core :as hiccup-core]))
#+END_SRC

#+RESULTS:
: nil

We will need a function to make a JSON call to the websites which output as
json. Some websites will have their own functions since each API is different.
First we'll make a ~rss~ reader since most websites have an rss feed. We will
use [[https://github.com/tebeka/feedme][feedme]] to read the ~rss~ in.

#+BEGIN_SRC clojure :tangle yes
  (defn read-rss [rss-url]
    (feedme/parse rss-url))
#+END_SRC

#+RESULTS:
: #'user/read-rss

#+BEGIN_SRC clojure :tangle yes
  (def my-db {:classname "org.sqlite.JDBC" :subprotocol "sqlite" :subname "db.db"})
#+END_SRC

#+RESULTS:
: #'user/my-db

Since we have our DB setup, we need a function to retrieve a user's links once
we have those links, we will be able to use ~read-rss~.

#+BEGIN_SRC clojure :tangle yes
  (defn user-links [user-name db]
    (-> (sql/query db ["select links from users where name=?" user-name])
        first
        :links))
#+END_SRC

#+RESULTS:
: #'user/user-links

Testing the function out to see if it works. The correct output should be: "[news.ycombinator.com/rss]" 
#+BEGIN_SRC clojure
  (assert (= (user-links "Jeel Shah" my-db) "[news.ycombinator.com/rss]") "Something went wrong")
#+END_SRC
#+RESULTS:
: nil

For each link we have to get first top responses from the RSS, get each of their title,
date, link so we can prettify it with ~hiccup~.

First we have to retrieve the title, date and link and the prettify it with
~hiccup~. We'll make the title ~h2~ with classname ~article-title~ and the date
~p~ with classname ~article-date~. The ~h2~ will be clickable. This will be
encompassed in a div with classname ~article~.

#+BEGIN_SRC clojure :tangle yes
  (defn prettify-rss-entry [rss-entry]
    (let [title (:title rss-entry) link (:link rss-entry) date (:date rss-entry)]
      (hiccup-core/html
       [:div {:class "article"}
        [:h2 {:class "article-title"} [:a {:href link} title]]
        [:p {:class "article-date"} date]])))
#+END_SRC

* RSS Testing 
We can look at the entries from the ~rss~ feed by using ~:entries~. Let's use
hacker news as an example.
#+BEGIN_SRC clojure
  (def hacker-news (:entries (read-rss "https://news.ycombinator.com/rss")))
#+END_SRC

#+RESULTS:
: #'user/hacker-news

#+BEGIN_SRC clojure
  (nth (seq hacker-news) 0)
#+END_SRC

#+RESULTS:
: '(:content "<a href=\"https://news.ycombinator.com/item?id=14287235\">Comments</a>"  :updated nil  :title "Wikipedia has cancer"  :author ""  :categories ()  :link "https://en.wikipedia.org/wiki/Wikipedia:Wikipedia_Signpost/2017-02-27/Op-ed"  :id "https://en.wikipedia.org/wiki/Wikipedia:Wikipedia_Signpost/2017-02-27/Op-ed"  :content-type nil  :published #inst "2017-05-07T19:49:32.000-00:00")

We can easily get the title by using ~:title~.

#+BEGIN_SRC clojure
  (:title (nth (seq hacker-news) 0))
#+END_SRC

#+RESULTS:
: Wikipedia has cancer

Now that we have simple retrieval function for our rss feeds, we can create a
retrieval function for ~sqlite~ db. First let's create a db.

* DB Setup
#+BEGIN_SRC clojure
  (def user-db {:classname "org.sqlite.JDBC" :subprotocol "sqlite" :subname "db.db"})
#+END_SRC

#+RESULTS:
: #'user/user-db

Then let's add a user table which has fields name and links. The links field
will be a string of text however, the text will contain a vector of the user's
preferred feeds.
#+BEGIN_SRC clojure
  (defn create-db []
    (try (sql/db-do-commands user-db
                             (sql/create-table-ddl :users
                                                   [:id :integer :primary :key :autoincrement]
                                                   [:name :text]
                                                   [:links :text]))
         (catch Exception e (println e))))

  (create-db)
#+END_SRC

#+RESULTS:
: #'user/create-db(0)

#+BEGIN_SRC clojure
  (sql/insert! user-db :users {:name "Jeel Shah" :links "[news.ycombinator.com/rss]"})
#+END_SRC

#+RESULTS:
| :last_insert_rowid | nil | 1 |

We're going to test our db by retreving the (only) record from our db.

#+BEGIN_SRC clojure
  (sql/query user-db "select name, links from users")
#+END_SRC

#+RESULTS:
| :name | Jeel Shah | :links | [news.ycombinator.com/rss] |

