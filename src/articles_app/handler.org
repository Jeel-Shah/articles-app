#+title: Handler
#+date: <2017-05-07 Sun>
#+author: Jeel Shah

The handler is like the ~main~ for the application that we are trying to build.
We'll be using ~compojure~ to create our web server and [[https://github.com/weavejester/hiccup][hiccup]] to generate the
html templates.

We'll also set up a simple db to keep track of websites for user (in this case,
myself).

#+BEGIN_SRC clojure :tangle yes
  (ns articles-app.handler
    (:require [articles-app.retrieval-functions :refer [read-rss user-links pretty-top-10-entries my-db]]
              [compojure.core :refer :all]
              [compojure.route :as route]
              [ring.middleware.defaults :refer [wrap-defaults site-defaults]]
              [hiccup.page]
              [hiccup.core]))
#+END_SRC

#+RESULTS:
: nil

We need to retrieve the links and then read them in using our read-rss function.

#+BEGIN_SRC clojure :tangle yes
(def user-rss (map #(read-rss %) (user-links "Jeel Shah" my-db)))
#+END_SRC

#+BEGIN_SRC clojure :tangle yes
(defn interesting-reads []
  (hiccup.page/html5
   {:lang "en"}
   [:head [:title "Interesting Reads"]]
   [:body [:h1 "Interesting Reads"] (for [x (map #(pretty-top-10-entries %) user-rss)]
                                      x)]))
#+END_SRC

#+RESULTS:
: #'user/interesting-reads

We can define routes by using ~defroutes~. We will only have one route for the
time being namely "/" because the interesting links should be at the forefront.
In other words, cut the bs and show me the goods.

#+BEGIN_SRC clojure :tangle yes
  (defroutes app-routes
    (GET "/" [] (interesting-reads))
    (route/not-found "Sorry, that doesn't make sense."))
#+END_SRC

In order to run the app we need the following:

#+BEGIN_SRC clojure :tangle yes
  (def app
    (wrap-defaults app-routes site-defaults))
#+END_SRC
